[user]
    name = Romain Chossart
    email = romainchossart@gmail.com
    signingkey = 8FDC059FCC879FD9B2C6874BCBA9C3883C422717

[core]
    excludesfile = ~/.gitexclude
    hooksPath = ~/.githooks
    trustctime = false

    # Use diff-highlight script if it exists, or just use less.
    # Diff-highlight highlights the specific words that change in a diff.
    # pager = "$(dh=/usr/local/share/git-core/contrib/diff-highlight/diff-highlight; [ -x "$dh" ] && echo "$dh" || echo cat) | less"

    # Fancy diff viewer
    pager = delta --paging=always

[delta]
    # syntax-theme = Monokai Extended
    syntax-theme = Dracula
    line-numbers = true
    side-by-side = false

[interactive]
    # Don't show the a/ and b/ prefixes in files during `git add --patch`.
    # Diffs can have colors, so we can't simply match '^---' / '^+++'. But BSD
    # sed doesn't seem to be able to match an escape sequence, so just match
    # '^.[' instead of '^\e['.
    diffFilter = sed -E -e 's,(^|^.\\[[^ ]{4\\,6})--- a/,\\1--- ,' -e 's,(^|^.\\[[^ ]{4\\,6})\\+\\+\\+ b/,\\1\\+\\+\\+ ,'

[color]
    ui = auto
[color "branch"]
    current = blue reverse
    local = magenta
    remote = yellow
[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
    whitespace = red reverse
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    ce  = config --global --edit         # Open this file with $VISUAL.

    st = status
    a = add
    br = branch
    co = checkout
    l = log
    s = show

    d = diff
    dif = diff
    dc = diff --cached

    c = commit
    ci = commit
    ca = commit --amend
    cf = commit --fixup
    cac = commit --amend -C HEAD
    caca = commit --amend -C HEAD -a

    ra=remote add
    rr=remote rm
    rv=remote -v

    rb = rebase
    re = rebase
    rec = rebase --cont
    rea = rebase --abort

    # Add an empty file (give the file path as argument). e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 is the hash for empty.
    add-empty = "! for file in $@; do git update-index --add --cacheinfo 0644 e69de29bb2d1d6434b8b29ae775ad8c2e48c5391 $file; done #"
    autorb = ! GIT_SEQUENCE_EDITOR=true git rebase -i

    sub = submodule
    cpi = cherry-pick
    cpic = cherry-pick --continue
    cpia = cherry-pick --abort
    push = push

    f = fetch            # Fetch one remote.
    fa = fetch --all     # Fetch from all the remotes.
    fod = fetch origin dev
    fom = fetch origin main
    fud = fetch up dev
    fum = fetch up main

    pl = pull
    pullod = !echo "run 'git plod' instead"
    pullom = !echo "run 'git plom' instead"
    pullud = !echo "run 'git plud' instead"
    pullum = !echo "run 'git plum' instead"
    plod = pull origin dev
    plom = pull origin main
    plud = pull up dev
    plum = pull up main

    p = push
    pf = push --force-with-lease
    pod = push origin dev
    pom = push origin master
    pud = push up dev
    pum = push up master

    # Handy aliases
    headUpstream = rev-parse --abbrev-ref --symbolic-full-name @{u} # Upstream of current branch, e.g. origin/master.
    headRemote = "!git rev-parse --abbrev-ref --symbolic-full-name @{u} | cut -d '/' -f 1" # e.g. origin.
    headBranch = symbolic-ref --short HEAD # e.g. master.
    remoteOrg = "!git remote get-url $1 | awk -F ':|/' '{print $(NF-1)}' #" # Github org for remote. `g remoteOrg up` -> gibfahn.
    defaultBranch = "!git symbolic-ref --short refs/remotes/$1/HEAD | sed \"s|^$1/||\" #" # Default branch for remote. `g defaultBranch up` -> master

    # Create/update branch from Github PR, `g fp 657 origin`, `g fp 657` or `g fp` (Defaults: $1=<current branch>, $2=upstreamRemote).
    fp = "! b=${2:-$(git headRemote)}; b=${b:-up}; a=${1:-$(git headBranch)}; git fetch -fu $b pull/$a/head:$a; git checkout $a; git branch -u $b #"

    # A nice list of branches with dates
    brs = !git for-each-ref --sort=-committerdate refs/heads/ \
        --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(objectname:short)|%(color:green)%(committerdate:relative)%(color:reset)' \
        | column -ts '|'

    brsa = !git for-each-ref --sort=-committerdate refs/heads/ refs/remotes/ \
        --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset)|%(objectname:short)|%(color:green)%(committerdate:relative)%(color:reset)' \
        | column -ts '|'

    out = !git fetch && git log FETCH_HEAD
    in  = !git fetch && git log ..FETCH_HEAD

    # To make sure you don commit a given file:
    # git assume passwords.txt
    # # Do whatever (including commit/push)
    # git status
    # # List the 'assumed-unchanged' files
    # git assumed
    # git unassume passwords.txt
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assumed  = "!git ls-files -v | grep ^h | cut -c 3-"

    # Snapshot without changing working tree
    snapshot = git stash save "snapshot: $(date)" || git stash apply "stash@{0}"

    # Tip: use git diff --patience (or git pull/merge -s patience) when there
    # is a lot of repeated lines (see
    # http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/)

    lol = log --graph --decorate --pretty=oneline --abbrev-commit
    lola = log --graph --decorate --pretty=oneline --abbrev-commit --all

    # Open merge conflicts in editor.
    mc  = "!echo \"$VISUAL\" | grep -iq vi && c='-c /\\(|||||||\\|=======\\|>>>>>>>\\|<<<<<<<\\)' || c=\"\"; git diff --name-only --diff-filter=U | xargs $VISUAL $c"

    # Get the version in the format that is used in go.mod.
    goversion = !TZ=UTC0 git --no-pager show --quiet --abbrev=12 --date='format-local:%Y%m%d%H%M%S' --format="%cd-%h"

    # Install git-lfs locally (current repo only)
    lfs-setup = "! git config core.hooksPath .git/hooks && git lfs install --local && git lfs fetch && git lfs checkout #" # Set up local git-lfs.

[init]
    defaultBranch = main
[credential]
    helper = osxkeychain
[rerere]
    enabled = true
[push]
    default = simple

[merge "ours"]
    driver = true

[merge "theirs"]
    driver = mv %B %A

[merge "conflict"]
    driver = false
[rebase]
    autosquash = true

[merge]
    conflictstyle = diff3    # Show common ancestor in diffs (initially confusing, but very helpful).
    tool = p4mergetool  # p4merge is a nice 3-way merge tool
	# tool = meld       # meld is an alternative
[mergetool "p4mergetool"]
    cmd = /Applications/p4merge.app/Contents/Resources/launchp4merge $PWD/$BASE $PWD/$REMOTE $PWD/$LOCAL $PWD/$MERGED
    trustExitCode = false
[mergetool "meld"]
    cmd = meld "$LOCAL" "$MERGED" "$REMOTE" --output "$MERGED"
[mergetool]
    keepBackup = false

[includeIf "gitdir:~/geo/"]
    path = .gitconfig-work

[includeIf "gitdir:~/go/src/github.pie.*/"]
    path = .gitconfig-work

[pull]
    rebase = true  # Rebase by default when doing a pull
[bash]
    showDirtyState = false
[commit]
    verbose = true
    gpgsign = true
[submodule]
    fetchJobs = 6
[interactive]
    singleKey = true
[status]
    showStash = true
[stash]
    showPatch = true
[diff]
    # noprefix = true
