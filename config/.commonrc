# bash and zsh rc file

###############################
#           PRELUDE           #
###############################

if [[ -n "${ZSH_VERSION:-}" ]]; then
    shell=zsh
elif [[ -n "${BASH_VERSION:-}" ]]; then
    shell=bash
else
    shell=unknown
fi

# Functions to measure how long parts of your zshrc takes to execute.
# Call `time_tick` to split things into sections.
# Finish by calling `time_toal`.
declare -F SECONDS=$SECONDS
declare -i ddd_firsttime=$((SECONDS * 1000))
declare -i ddd_oldtime=$ddd_firsttime
time_tick() {
    [[ $shell != zsh ]] && return
    printf "%s" "$((i++)): "
    ddd_newtime=$((SECONDS * 1000))

    printf "%dms\n" "$((ddd_newtime - ddd_oldtime))"
    ddd_oldtime=$ddd_newtime
}
time_total() {
    [[ $shell != zsh ]] && return
    ddd_newtime=$((SECONDS * 1000))
    printf "Last: %sms\n" "$((ddd_newtime - ddd_firsttime))"
}

# Non-interactive mode
[[ -z "$PS1" ]] && return

if [[ -n ${COMMONRC_SOURCED:-} ]]; then
    echo "~/.commonrc was already sourced!" >&2
fi
COMMONRC_SOURCED=1

exists() { command -v "$1" >/dev/null 2>&1; } # Check if command exists (is in path).


###############################
#     OPTIONS / ENV VARS      #
###############################

# Binaries in home
export PATH=~/bin:~/.cargo/bin:${GOPATH:-$HOME/go}/bin:$PATH

# Less (--quit-if-one-screen needs version >= 520 to work with alternate screens, i.e. without --no-init)
# Tab is 4 spaces, search ignores case, enable colours, cat if less than one screen.
# --status-column: column to show lines matching current search or first unread line after moving,
# --ignore-case: smartcase search, --LONG-PROMPT: verbose prompt, --RAW-CONTROL-CHARS: show colors,
# --HILITE-UNREAD: highlight first unread line moving, --tabs=4: tab is 4 spaces,
# --window=-4: keep 4 lines overlapping when scrolling with the space key
export LESS='--tabs=4 --ignore-case --quit-if-one-screen --RAW-CONTROL-CHARS --status-column --LONG-PROMPT --HILITE-UNREAD --window=-4'

if exists nvim; then
    export EDITOR="nvim"
elif exists vim; then
    export EDITOR="vim"
else
    export EDITOR="vi"
fi
export VISUAL="$EDITOR"
export PAGER=less

export XDG_CONFIG_HOME=~/.config

[[ -z $TERM ]] && export TERM=xterm-256color

# Homebrew
if exists brew; then
    __brew_prefix=$(brew --prefix)
    export HOMEBREW_NO_ANALYTICS=1
    export HOMEBREW_NO_AUTO_UPDATE=1

    export PATH="$__brew_prefix/bin:$__brew_prefix/sbin:$PATH"

    if exists gls; then
        alias ls='gls --color=auto'
    fi
fi

# Dircolors (ls output)
if exists dircolors && [[ -f ~/.dircolors ]] ; then
    # Works for Mac - does it for others?
    eval "$(dircolors "$HOME/.dircolors")"
fi

# Go
export PATH=$PATH:$GOPATH/bin
export GOPATH="$HOME/go"

# Misc
export VAGRANT_DEFAULT_PROVIDER=virtualbox


###############################
# ALIASES & SIMPLE FUNCTIONS  #
###############################

# Core
export CLICOLOR=1
alias sl='ls'
alias l='ls'
alias la='ls -al'
alias ll='ls -ahl'

lsd() { ls -F "$@" |grep '/$'  ; }

# Directory change functions
mkcd () {
    mkdir -p "$*" && cd "$*"
}

mkplayground() {
    play_dir=~/tmp/"$(date +%Y-%m-%d)"-"${1?Missing name for playground dir}"
    mkdir -p "$play_dir"
    echo "Created $play_dir"
    cd "$play_dir"
}



alias ,='cd ..'
alias ,,='cd ../..'
alias ,,,='cd ../../..'
alias ,,,,='cd ../../../..'
alias ,,,,,='cd ../../../../..'
alias ,,,,,,='cd ../../../../../..'

# Utilities (grep, basename, dirname)
alias grep='grep --color'

# Find
ff() {
    name="$1" ; shift
    find . -name '*'"$name"'*' "$@"
}

# Disk use sorted, process list
alias dus='du -shm * .[^.]* | sort -n'
alias pst='pstree -hAcpul'

# Editor related
alias e="commonrc__bazel_edit"
alias vim="echo 'Prefer using \"e\".'; sleep 0.3; $EDITOR"  # Incentive to use 'e' to edit stuff

# Bash, zsh, vim RC files
alias sob='source ~/.bashrc'
alias soz='source ~/.zshrc'
alias vimb="e ~/.commonrc"
alias vimz="e ~/.commonrc"
alias vimv="e ~/.vim/vimrc"
alias vimg="e ~/.gitconfig"
alias vimk="e ~/.kube/config"
alias p=python
alias p3=python3
alias psp='python setup.py'
alias pspt='python setup.py test'
alias pspp='python setup.py package'

# git
alias g=git
alias gg='git log --graph --color --pretty=format:"%x1b[31m%h%x09%C(auto)%d%Creset%x20%s"'
alias gg2='git log --graph --color --pretty=format:"%x1b[31m%h%x09%x20%x1b[0m%s%x1b[32m%d%x1b[0m"'
alias gga='git log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%C(auto)%d%Creset%x20%s"'
alias gga2='git log --graph --full-history --all --color --pretty=format:"%x1b[31m%h%x09%x20%x1b[0m%s%x1b[32m%d%x1b[0m"'
alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit --date=local"
alias gap="git add -p"

# ssh
alias sshx='ssh x230'

# Ripgrep
alias rga='rg --hidden --no-ignore --glob=!.git'

# Edit files in conflict
alias gec='git diff --name-only | uniq | xargs "$EDITOR"'

gl2() {
    # Escape < and > for github markdown
    git log --pretty=format:'* %Cred%h%Creset - %s %n%w(76,4,4)%b%n' --abbrev-commit "$@" | perl -0 -p -e 's/(^|[^\\])([<>])/\1\\\2/g ; s/(\s*\n)+\*/\n\n*/g'
}
gl3() {
    # Escape < and > for github markdown, no color
    git log --pretty=format:'* %h - %s %n%w(76,4,4)%b%n' --abbrev-commit "$@" | perl -0 -p -e 's/(^|[^\\])([<>])/\1\\\2/g ; s/(\s*\n)+\*/\n\n*/g'
}

gpr() {
    # Create a pull request from the current feature branch

    local github_user=rchossart  # <-- Amend accordingly

    command -v hub >/dev/null 2>&1 || { echo "This requires 'hub' to be installed --> 'brew install hub'"; return 1; }
    local symbolic_rev=$(git rev-parse --abbrev-ref HEAD)
    local unacceptable_branch='^dev$|^devel$|^master$|^release$'
    if [[ $symbolic_rev == HEAD ]]; then
        echo "Cannot create PR in detached HEAD mode." && return 1
    elif [[ $symbolic_rev =~ $unacceptable_branch ]]; then
        echo "Not creating PR from '$symbolic_rev'. Please use a feature branch instead." && return 2
    fi
    git push origin "$symbolic_rev" -u
    hub compare "$github_user:$symbolic_rev"
}

# cd to the first parent dir containing .git/
function cdg() {
    local curdir=$(pwd)
    while curdir=$(dirname "$curdir") && [[ $curdir != "/" ]]; do
        [[ -e $curdir/.git ]] && cd "$curdir" && return
    done
}

# Bazel
alias b=bazelisk
alias bob='bazelisk info output_base'
bobe() {
    echo "$(bazelisk info output_base)/external"
}

# JQ

# Hacky jq editor using fzf
fzjq() {
    f=${1:?Missing argument: json file}
    if [[ $# -gt 1 ]]; then
        echo "usage: fzjq JSON_FILE" >&2
        return 2
    fi
    echo '' | fzf --print-query --height "100%" --preview-window="top,99%" --preview "cat $f | jq -C {q}"
}

# Bazel edit - transform targets into their corresponding BUILD file.
commonrc__bazel_workspace_root() {
    set -eu
    (
    local current_dir
    for i in {1..10}; do
        current_dir=$(pwd -P)
        if [[ -e ./WORKSPACE ]]; then
            echo "$current_dir"
            return 0
        elif [[ $current_dir == / ]]; then
            break
        fi
        cd ..
    done
    return 1
    )
}

# Edit but replace bazel targets.
function commonrc__bazel_edit() {
    local workspace_root target args=()
    if ! workspace_root=$(commonrc__bazel_workspace_root); then
        args=("$@")
    else
        while [[ $# -gt 0 ]]; do
            arg=$1
            if [[ $arg == //* ]]; then
                arg=${arg/\/\//}
                if [[ $arg == *:* ]]; then
                    # Simplistic way to jump to the right target in vim
                    # (just search for 'name = "the-target"').
                    target=${arg##*:}
                    args+=("+/name = \"$target\"")
                    arg=${arg%:*}
                fi
                arg+="/BUILD"
                if ! [[ -f $workspace_root/$arg ]]; then
                    arg+=".bazel"
                fi
                if ! [[ -f $workspace_root/$arg ]]; then
                    echo "[could not find BUILD file for $1]" >&2
                    return 1
                fi
            fi
            args+=("$arg")
            shift
        done
    fi
    "$EDITOR" "${args[@]}"
}

bzgraph() {
    local target=${1:?missing argument: target}
    bazelisk query "deps($target)" --noimplicit_deps --output graph > graph.in && \
        dot -Tpdf < graph.in > graph.pdf && \
        open graph.pdf
}

bzigraph() {
    local target=${1:?missing argument: target}
    bazelisk query "deps($target)" --output graph > graph.in && \
        dot -Tpdf < graph.in > graph.pdf && \
        open graph.pdf
}

bzcgraph() {
    local target=${1:?missing argument: target}
    bazelisk cquery "deps($target)" --noimplicit_deps --output graph > graph.in && \
        dot -Tpdf < graph.in > graph.pdf && \
        open graph.pdf
}

bzicgraph() {
    local target=${1:?missing argument: target}
    bazelisk cquery "deps($target)" --output graph > graph.in && \
        dot -Tpdf < graph.in > graph.pdf && \
        open graph.pdf
}

alias bzoutputs='bazel cquery --output=starlark --starlark:file=$HOME/bin/bazel-outputs.starlark'
alias bzrunfiles='bazel cquery --output=starlark --starlark:file=$HOME/bin/bazel-runfiles.starlark'

# Rust
alias c=cargo
alias cb='cargo build'

# Docker
alias d=docker
alias dr='docker run -ti'
alias drr='docker run -ti --rm'
dockertags() {
    local repo=${1?Missing argument #1: docker image (repo)}
    echo "skopeo inspect \"docker://\$repo\" --override-os=linux | jq .RepoTags"
    skopeo inspect "docker://$repo" --override-os=linux | jq .RepoTags
}

# Kubernetes
alias k=kubectl
alias kx=kubectx
alias xk='kubectl --kubeconfig ~/.kube/config.x230'
alias xkx='KUBECONFIG='~/.kube/config.x230' kubectx'
alias xk9s='k9s --kubeconfig ~/.kube/config.x230'

# Ansible
alias ap='ansible-playbook'


############################
#        BOOKMARKS         #
############################

# Other
alias vim_restore_session='vim $(find . -name ".*.sw[pon]" | while read f; do rm "$f"; echo "$f" | sed "s/\\.\\([^/]*\\).swp/\\1/"; done)'


############################
#        FUNCTIONS         #
############################


## Fuzzy-finder (fzf) - see https://junegunn.kr/2016/07/fzf-git/

# Key bindings containing spaces need to be quoted.
# The shift-left/right bindings will be available in fzf >0.50.0
_fzf_bindings=(
'ctrl-t:toggle-all,alt-j:jump,alt-k:jump-accept,alt-p:toggle-preview,shift-up:toggle+up,shift-down:toggle+down'
\''shift-left:transform:for _ in $(seq $FZF_POS $FZF_MATCH_COUNT); do echo -n +toggle+up; done'\'
\''shift-right:transform:for _ in $(seq 1 $FZF_POS); do echo -n +toggle+down; done'\'
)
# multi-selection, 60% height (default 40%),
# extended: use leading single quote for exact word matches.
export FZF_DEFAULT_OPTS="--multi --extended --height=60% ${_fzf_bindings[@]/#/--bind }"

if command -v fd >/dev/null 2>&1; then
    export FZF_ALT_C_COMMAND="command fd --type d 2> /dev/null"
    export FZF_DEFAULT_COMMAND='fd --type f'
fi

# Custom fuzzy completion for "z" command
#   e.g. z **<TAB>
_fzf_complete_z() {
    FZF_COMPLETION_TRIGGER='' FZF_COMPLETION_OPTS="$FZF_COMPLETION_OPTS --tac --no-sort" \
        _fzf_complete --reverse "$@" < <(_z -l 2>&1)
    COMPREPLY=$(sed -E 's/[^ ]*[[:space:]]+//' <<< "$COMPREPLY")

    # Need to add the following (doing it at the end of this file
    # to override z completion)
    # if [[ -n "$BASH" ]]; then
    # 	complete -F _fzf_complete_z -o default -o bashdefault z
    # fi
}


# No worky?
# --no-hscroll
# --bind ctrl-v:toggle-preview --preview-window down:3:hidden

# Open results of rg in vim, with fzf filtering
# TODO: add one that uses fzf to choose the files
alias re='$EDITOR -q <($(fc -ln -1) --vimgrep)'



## Python

# Virtualenv activate
alias vv='echo "Please use vv2 or vv3" && false'
alias vv2='virtualenv .venv && . .venv/bin/activate'
alias vv3='python3 -m venv .venv && . .venv/bin/activate'
va() {
    if [[ -d .venv${1:-} ]]; then
        . .venv${1:-}/bin/activate
        echo "Activated virtualenv from .venv${1:-}/"
    elif [[ -d venv${1:-} ]]; then
        . venv${1:-}/bin/activate
        echo "Activated virtualenv from venv${1:-}/"
    else
        echo "No .venv${1:-} or venv${1:-} directory found in cwd."
        return 1
    fi
}
alias vd=deactivate

# pytest, no coverage, no warning
alias pt="CI=1 unbuffer pytest --no-cov --junit-xml='' --disable-pytest-warnings | sed 's/WARNING: Coverage disabled via --no-cov switch!//'"

# Get the App Bundle ID (Associated Domain) of a macOS/iOS/etc app, using an app store link, or an app on the system.                                                                                              [0s] 10:45:01
# Useful for adding to 1Password: https://www.reddit.com/r/1Password/comments/hk02p7/suggestions_in_apps_for_1password_for_macos/.
# Refs: StackOverflow (https://stackoverflow.com/questions/27509838/how-to-get-bundle-id-of-ios-app-either-using-ipa-file-or-app-installed-on-iph)
# Usage:
#   apple_app_bundleid https://apps.apple.com/us/app/watch/id1069511734
#   apple_app_bundleid /Applications/kitty.app
apple_app_bundleid() {
  case $1 in
    https://*) # Assume URL (Google for the app, copy URL).
      id=${1##*id} # Assumes $1 is a URL like https://apps.apple.com/.../id0000000000
      curl "https://itunes.apple.com/lookup?id=${id}" | jq -r '"app://\(.results[0].bundleId)"'
      ;;
    *) # Assume App Name / Path.
      id=$1
      echo "app://$(osascript -e "id of app \"$1\"")"
      ;;
  esac
}


#
## Shell-specific config
#

case "$shell" in

    zsh)

        # Change the name of the history file to avoid the case where zsh is
        # run without the user .zshrc file and zsh truncates the file because
        # of default settings.
        export HISTFILE=~/.zsh_history_sita
        export HISTSIZE=100000
        export SAVEHIST=100000  # zsh only

        export GPG_TTY=$(tty)

        if [[ -e ~/bin/git-prompt.sh ]]; then
            . ~/bin/git-prompt.sh
        fi

        preexec() {
            timer=${timer:-$SECONDS}
        }

        precmd() {
            if [[ -n $timer ]]; then
                timer_show=$(($SECONDS - $timer))
                if [[ $timer_show -lt 10 ]]; then
                    printf -v timer_show "%.1f" "$timer_show"
                else
                    printf -v timer_show "%.0f" "$timer_show"
                fi
                unset timer
            fi
        }

        ## Prompt

        # Evaluate this once only.
        exists __git_ps1 && __GIT_PS1_EXISTS=true || __GIT_PS1_EXISTS=false

        # default_prompt() {
        #     # Built-in zsh VCS info
        #     setopt prompt_subst

        #     export VIRTUAL_ENV_DISABLE_PROMPT=1  # We do it ourselves

        #     local prompt_mark venv vcs ret_code
        #     local newline=$'\n'

        #     # Shell integration escape sequence (allows quickly jumping from prompt to prompt with iTerm2).
        #     # ...but it messes with the terminal so I'm deactivating it.
        #     [[ $TERM_PROGRAM == iTerm.app ]] && prompt_mark=$'%{\e]1337;SetMark\x07%}' || prompt_mark=''
        #     # Virtualenv in green
        #     venv='${VIRTUAL_ENV:+%F{28\}(${VIRTUAL_ENV##*/}) %f}'
        #     # Show the branch with a space (and escape percent signs) but only if present.
        #     [[ $__GIT_PS1_EXISTS == true ]] && vcs='%F{240}$(__git_ps1 "(%s) ")%f' || vcs=''
        #     # Show the return code in orange with red brackets if non-zero.
        #     ret_code='%(?..%F{red}[%F{214}%?%F{red}] %f)'
        #     # Left prompt: purple path, red/orange non-zero status code, grey % (# for root)
        #     PROMPT=${prompt_mark}'%F{161}%~%f '${venv}${vcs}${ret_code}'%F{240}%#%f '
        #     # Right prompt: last command time, grey date
        #     RPROMPT='[%F{yellow}${timer_show:-0}s%f] %F{240}%*%f'
        # }
        # default_prompt

        default_prompt() {
            # Built-in zsh VCS info
            setopt prompt_subst

            export VIRTUAL_ENV_DISABLE_PROMPT=1  # We do it ourselves

            local prompt_mark venv vcs ret_code
            local newline=$'\n'

            # Shell integration escape sequence (allows quickly jumping from prompt to prompt with iTerm2).
            # ...but it messes with the terminal so I'm deactivating it.
            [[ $TERM_PROGRAM == iTerm.app ]] && prompt_mark=$'%{\e]1337;SetMark\x07%}' || prompt_mark=''
            # Virtualenv in green
            venv='${VIRTUAL_ENV:+%F{28\}(${VIRTUAL_ENV##*/}) %f}'
            # Show the branch with a space (and escape percent signs) but only if present.
            [[ $__GIT_PS1_EXISTS == true ]] && vcs='%F{240}$(__git_ps1 "(%s) ")%f' || vcs=''
            # Show the return code in orange with red brackets if non-zero.
            ret_code='%(?..%F{red}[%F{214}%?%F{red}] %f)'
            # Left prompt: purple path, red/orange non-zero status code, grey % (# for root)
            PROMPT=${prompt_mark}'%F{161}%~%f '${venv}${vcs}${ret_code}
            # Continued left prompt: last command time, grey date
            PROMPT+='[%F{yellow}${timer_show:-0}s%f] %F{240}%*%f'
            PROMPT+=$newline'%F{240}%#%f '
        }
        default_prompt

        ## Autoloads (run early so it doesn't override our key bindings)

        # ZSH completion initialization
        # On slow systems, checking the cached .zcompdump file to see if it must be
        # regenerated adds a noticable delay to zsh startup.  This little hack restricts
        # it to once a day.  It should be pasted into your own completion file.
        #
        # The globbing is a little complicated here:
        # - '#q' is an explicit glob qualifier that makes globbing work within zsh's [[ ]] construct.
        # - 'N' makes the glob pattern evaluate to nothing when it doesn't match (rather than throw a globbing error)
        # - '.' matches "regular files"
        # - 'mh-24' matches files that are more recent than 24 hours.
        autoload -U compinit
        _update_zcomp() {
            setopt extendedglob
            if [[ -z ~/.zcompdump(#qN.mh-24) ]]; then
            # if true; then
                compinit -d ~/.zcompdump
                touch ~/.zcompdump
            else
                compinit -C -d ~/.zcompdump
            fi;
            unsetopt extendedglob
        }
        _update_zcomp

        ## Other tools

        # Added by fzf - needs to be set before the `binkeys` calls down there to override.
        # Takes ~25 or 30 ms
        [ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

        ## ZSH config (see `man zshoptions`)

        # Flow - disable control-s/control-q flow control
        setopt noflowcontrol

        # History
        setopt hist_ignore_all_dups hist_ignore_space share_history extended_history hist_expire_dups_first

        # Completion
        setopt beep no_autolist bash_autolist no_menucomplete no_automenu no_dotglob

        # Allow comments on the command line.
        setopt interactivecomments

        # Add ~/.zsh/completion/ to the fpath for completion scripts.
        # Run 'rm -f ~/.zcompdump; compinit' after adding anything here.
        fpath[1,0]=~/.zsh/completion/

        # This way the completion script does not have to parse Bazel's options
        # repeatedly.  The directory in cache-path must be created manually.
        [[ -e ~/.zsh/cache-completion ]] || mkdir -p ~/.zsh/cache-completion
        zstyle ':completion:*' use-cache on
        zstyle ':completion:*' cache-path ~/.zsh/cache-completion


        ## Prompt movement

        # Alt+Backspace - delete one word (not including colon, dot...)
        my-backward-kill-smallword () {
            local WORDCHARS='_'
            zle -f kill # Append to the kill ring on subsequent kills.
            zle backward-kill-word
        }
        zle -N my-backward-kill-smallword
        bindkey '^[^?' my-backward-kill-smallword

        # Alt+b - move one word backwards (not including colon, dot...)
        my-backward-smallword () {
            local WORDCHARS='_'
            zle backward-word
        }
        zle -N my-backward-smallword
        bindkey "^[b" my-backward-smallword

        # Alt+f - move one word forwards (not including colon, dot...)
        my-forward-smallword () {
            local WORDCHARS='_'
            zle forward-word
        }
        zle -N my-forward-smallword
        bindkey "^[f" my-forward-smallword

        # Alt-d - delete one word forward (not including colon, dot...)
        my-forward-kill-word () {
            # Only delete alphanum and underscores in one stroke.
            local WORDCHARS='_'
            zle -f kill # Append to the kill ring on subsequent kills.
            zle kill-word
        }
        zle -N my-forward-kill-word
        bindkey '^[d' my-forward-kill-word

        # Ctrl-w - delete a full WORD (including colon, dot...)
        my-backward-kill-word () {
            # Add colon, comma, @, +, single/double quotes to word chars
            local WORDCHARS='*?_-.[]~=/&;!#$%^(){}<>:,+@"'"'"
            zle -f kill # Append to the kill ring on subsequent kills.
            zle backward-kill-word
        }
        zle -N my-backward-kill-word
        bindkey '^w' my-backward-kill-word

        ## zplugin

        if [[ -e "$HOME/.zplugin/bin/zplugin.zsh" ]]; then

            ### Added by Zplugin's installer
            source "$HOME/.zplugin/bin/zplugin.zsh"
            # These two lines are needed if `compinit` is run before this.
            # Annoyingly it causes a syntax error for bash though.
            # autoload -Uz _zplugin
            # (( ${+_comps} )) && _comps[zplugin]=_zplugin
            ### End of Zplugin installer's chunk

            # Completion
            # zplugin ice wait blockf atpull'zplugin creinstall -q .'
            # zplugin light zsh-users/zsh-completions
 
            # Pure theme
            # zplugin ice pick"async.zsh" src"pure.zsh"
            # zplugin light sindresorhus/pure

            # Disabling because of two issues:
            # - Ctrl-w does not accumulate (https://github.com/zdharma/fast-syntax-highlighting/issues/162)
            # - Parentheses and backticks are doubled in some contexts (e.g. within quotes)
            #
            #    # Syntax highlighting on prompt.
            #    zplugin light zdharma/fast-syntax-highlighting

        fi

        # Override the default UP/DOWN/CTRL-R history to only take "local" history (not the one shared with other shells).
        up-line-or-local-history() {
            zle set-local-history 1
            zle up-line-or-history
            zle set-local-history 0
        }
        zle -N up-line-or-local-history
        down-line-or-local-history() {
            zle set-local-history 1
            zle down-line-or-history
            zle set-local-history 0
        }
        zle -N down-line-or-local-history

        # The only meaningful change from .fzf.zsh is the `-L` flag added to `fc`.
        fzf-history-widget-local() {
            local selected num
            setopt localoptions noglobsubst noposixbuiltins pipefail no_aliases 2> /dev/null
            selected=( $(fc -Lrl 1 |
                FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} $FZF_DEFAULT_OPTS -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(qqq)LBUFFER} +m" $(__fzfcmd)) )
            local ret=$?
            if [ -n "$selected" ]; then
                num=$selected[1]
                if [ -n "$num" ]; then
                zle vi-fetch-history -n $num
                fi
            fi
            zle reset-prompt
            return $ret
        }
        zle -N fzf-history-widget-local

        # Local history (initial .zsh_history then local shell)
        bindkey '^[[A' up-line-or-local-history
        bindkey '^[OA' up-line-or-local-history  # Up in the CSI u escape codes
        bindkey '^[[B' down-line-or-local-history
        bindkey '^[OB' down-line-or-local-history  # Down in the CSI u escape codes
        bindkey '^R' fzf-history-widget-local

        # Global history (across shells)
        bindkey '^[[1;2A' up-line-or-history  # Shift-up
        bindkey '^[[1;2B' down-line-or-history # Shift-down
        bindkey "\e[H" beginning-of-line  # Home
        bindkey "\e[F" end-of-line  # End
        bindkey "\e[5~" up-line-or-history  # PageUp
        bindkey "\e[6~" down-line-or-history  # PageDown
        bindkey '^X^R' fzf-history-widget  # Ctrl-X Ctrl-R

        bindkey "\e[95;5u" undo  # Ctrl-_

        bindkey "^Q" push-input

        # Edit the current line with EDITOR
        autoload -z edit-command-line
        zle -N edit-command-line
        bindkey "^X^E" edit-command-line

        # autoload -z edit-command-line
        # zle -N edit-command-line
        # bindkey "^X^E" edit-command-line

        # More zsh bindkeys
        bindkey \^U backward-kill-line  # Use bash's behaviour (don't kill-whole-line).
        bindkey "${terminfo[kcbt]}" reverse-menu-complete   # <Shift>-<Tab> - move backwards through the completion menu.


        # "CSI U" (libtermkey) allow shift-space/enter etc which is great but let's map
        # shift-space to space as I often have the shift key still pressed after e.g. a
        # pipe command on the shell.
        bindkey -s "\e[32;2u" " "  # Space
        bindkey -s "\e[127;2u" "\C-?"  # Backspace
        bindkey -s "\e[13;2u" "\C-J"  # Enter

        # Bindings that run commands
        # F12
        bindkey -s "\e[24~" 'e $(!! -l)\n'

        # Fzf git files.
        _gib_git_f() {
            git -c color.status=always status --short |
                fzf --height 50% "$@" --border -m --ansi --nth 2..,.. \
                --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' | cut -c4- | sed 's/.* -> //'
        }
        # Fzf git branches.
        _gib_git_b() {
            git branch -a --color=always --sort=committerdate --sort=-refname:rstrip=2 | grep -v '/HEAD\s' |
                fzf --height 50% "$@" --border --ansi --multi --tac --preview-window right:70% \
                --preview 'git log --color=always --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -200' | sed 's/^..//' | cut -d' ' -f1 | sed 's#^remotes/##'
        }
        # Fzf git tags.
        _gib_git_t() {
            git tag --sort -version:refname |
                fzf --height 50% "$@" --border --multi --preview-window right:70% \
                --preview 'git show --color=always {} | head -200'
        }
        # Fzf git commits.
        _gib_git_h() {
            git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
                fzf --height 50% "$@" --border --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
                --header 'Press CTRL-S to toggle sort' \
                --preview 'awk "{ print \$3 }" <<< {} | xargs git show --color=always | head -200' | awk "{ print \$3 }"
        }
        # Fzf git remotes.
        _gib_git_r() {
            git remote -v | awk '{print $1 "\t" $2}' | uniq |
                fzf --height 50% "$@" --border --tac \
                --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
                cut -d$'\t' -f1
        }

        # Helper function to bind each git fzf completion to <c-g><c-something>.
        _gib_join-lines() { local item; while read -r item; do echo -n "${(q)item} "; done; }
        bind-git-helper() {
            local c
            for c in "$@"; do
                eval "_gib_fzf-g$c-widget() { git rev-parse HEAD > /dev/null 2>&1 || return; local result=\$(_gib_git_$c | _gib_join-lines); zle reset-prompt; LBUFFER+=\$result }"
                eval "zle -N _gib_fzf-g$c-widget"
                eval "bindkey -M viins '^g^$c' _gib_fzf-g$c-widget"
                eval "bindkey -M emacs '^g^$c' _gib_fzf-g$c-widget"
            done
        }
        bindkey -r -M viins "^G" # Remove list-expand binding so we can use <C-g> for git.
        bindkey -r -M emacs "^G" # Remove list-expand binding so we can use <C-g> for git.
        bind-git-helper f b t r h # Bind <C-g><C-{f,b,t,r,h}> to fuzzy-find show {files,branches,tags,remotes,hashes}.
        unset -f bind-git-helper

        # Load z (jump to directories, see `man z`) if brew is installed and z is too
        if exists brew; then
            # Load rupa's z if installed
            [ -f "$(brew --prefix)/etc/profile.d/z.sh" ] && source "$(brew --prefix)/etc/profile.d/z.sh"
            export HOMEBREW_NO_ANALYTICS=1
        fi

        # Add the fuzzyfinder completion - TODO: migrate to zsh
        if [[ -n "${ZSH_VERSION:-}" ]]; then
            [[ -e ~/git/fz/fz.sh ]] && . ~/git/fz/fz.sh
        fi

        # # Kubectl completion (takes 200ms+ to load)
        # source <(kubectl completion zsh)
        # complete -F __start_kubectl k

        # Complete aliases as their original commands.
        # compdef b=bazel
        compdef gw=gradle
        compdef g=git
        # compdef d=docker

        ;;

    bash) # bash specific options.

        # Bash
        shopt -s histappend
        export HISTCONTROL=ignoredups
        export HISTFILESIZE=100000
        export HISTSIZE=100000  # zsh

        export L_PS1_HOST_COLOR="46" # Green by default
        export L_PS1_ALREADY_SET=""

        # Completion/prompt functions
        bash_completion_dir=/usr/local/etc/bash_completion.d

        # Docker, Git
        [[ -s $bash_completion_dir/docker ]] && . "$bash_completion_dir/docker"
        [[ -s $bash_completion_dir/git-completion.bash ]] && \
            . "$bash_completion_dir/git-completion.bash"

        _this_realdir=$(cd "$(dirname \
            "$(my_relpath "$(readlink "$BASH_SOURCE")" "$(dirname "$BASH_SOURCE")")")" \
            && pwd -P)

        # A copy of the git prompt is in the resources/ dir
        if [[ -s $bash_completion_dir/git-prompt.sh ]];then
            . "$bash_completion_dir/git-prompt.sh"
        elif [[ -s $_this_realdir/../resources/bash/git-prompt.sh ]]; then
            . "$_this_realdir/../resources/bash/git-prompt.sh"
        fi

        # Some tokens and other private stuff
        # - HOMEBREW_GITHUB_API_TOKEN: github token to be used by homebrew (untick all permissions - public only)
        [[ -e ~/.bashrc_private ]] && source ~/.bashrc_private

        # Load OS-specific rc files
        #
        if [[ "$(uname)" == 'Darwin' ]]; then # MacOS
            source ~/.bashrc_mac
        elif [[ "$(uname)" == 'Linux' ]]; then # Linux (slacker / kollok)
            source ~/.bashrc_linux
        fi

        # This one is only for local stuff
        if [[ -e ~/.bashrc_misc ]]; then
            source ~/.bashrc_misc
        fi

        ###############################
        #           PROMPT            #
        ###############################

        # export GIT_PS1_SHOWDIRTYSTATE=true # *: unstaged changes, +: staged changes
        # export GIT_PS1_SHOWSTASHSTATE=true # $: something is stashed
        # export GIT_PS1_SHOWUNTRACKEDFILES=true # %: untracked files exist
        # export GIT_PS1_SHOWUPSTREAM="auto" # <: behind upstream, >: ahead upstream, <>: diverged
        L_Z_PROMPT_CMD=${L_Z_PROMPT_CMD:-true}

        # then you can add \`jobs_count\` to the end of your PS1 like this
        export PS1="\[\e[32m\]\u\[\e[m\]@\[\e[32m\]\h\[\e[m\]:\[\e[34m\]\w\[\e[m\]\`git_branch\`\`jobs_count\`\n\$ "


        ## This is to have the last command's duration

        function __rc_set_last_command_start_time {
            __RC_LAST_COMMAND_START=${__RC_LAST_COMMAND_START:-$SECONDS}
        }
        trap '__rc_set_last_command_start_time' DEBUG

        # Append to history if it's been a while
        __rc_append_bash_history_maybe() {
            # $SECONDS represents the # seconds since the start of the session
            if [[ $(( $SECONDS - ${__RC_LAST_HISTORY_SECONDS:-0} )) -gt 10 ]]; then
                history -a  # Apprend new history to .bash_history
                __RC_LAST_HISTORY_SECONDS=$SECONDS
            fi
        }

        C_RST='\[\e[0m\]'
        C_RED='\[\e[0;31m\]'
        C_BLUE='\[\e[01;34m\]'
        C_USER='\[\e[38;5;${L_PS1_HOST_COLOR}m\]'
        C_DATE='\[\e[38;5;166m\]'
        C_GIT='\[\e[38;5;63m\]'
        C_GREEN='\[\e[0;32m\]'
        C_YELLOW='\[\e[01;93m\]'
        C_VENV=$C_GREEN


        # Nice, complete prompt
        function __rc_prompt_command() {
            local EXIT="$?"  # This needs to be first

            local PS_EXIT=""
            if [[ $EXIT != 0 ]]; then
                PS_EXIT="${C_RED}[$EXIT]${C_RST} "
            fi

            # Avoid using pipes since subprocesses are expensive
            local -i job_count=0
            for i in $(jobs); do
            [[ $i == Running || $i == Sleeping ]] && job_count+=1
            done

            local job_count_prompt
            if [[ $job_count -gt 0 ]]; then
                job_count_prompt="${C_YELLOW}[${job_count}]${C_RST} "
            fi

            # $__RC_LAST_COMMAND_START is set by the DEBUG trap above
            local -i last_cmd_time_seconds=$(($SECONDS - $__RC_LAST_COMMAND_START))
            if [[ $last_cmd_time_seconds -gt 2 ]]; then
                PS_JOB_TIME="${C_YELLOW}[${last_cmd_time_seconds}s]${C_RST} "
            else
                PS_JOB_TIME=""
            fi
            unset __RC_LAST_COMMAND_START

            PS1=""
            PS1+="$job_count_prompt"
            [[ -n $VIRTUAL_ENV ]] && PS1+="${C_VENV}(venv)${C_RST} "
            PS1+="${C_GIT}$(__git_ps1 "(%s) ")${C_USER}\u:${C_RST}"
            PS1+="${C_DATE}$(date +%H:%M:%S)${C_BLUE}${_P_SSH} ${PS_EXIT}${PS_JOB_TIME}${C_BLUE}\w \$${C_RST} "

            __rc_append_bash_history_maybe

            # Z (autojump like thing) - defined in other .bashrc_xxx - replacing with FASD
            # "$L_Z_PROMPT_CMD" --add "$(command pwd -P 2>/dev/null)" 2>/dev/null
        }
        # Smaller prompt, good for presentations
        function __rc_prompt_command2() {
            local EXIT="$?"  # This needs to be first

            local PS_EXIT=""
            if [[ $EXIT != 0 ]]; then
                PS_EXIT="${C_RED}[$EXIT]${C_RST} "
            fi

            PS1=""
            PS1+="${C_DATE}$(date +%H:%M) ${PS_EXIT}${C_BLUE}\W \$${C_RST} "

            __rc_append_bash_history_maybe

            # Z (autojump like thing) - defined in other .bashrc_xxx - replacing with FASD
            # "$L_Z_PROMPT_CMD" --add "$(command pwd -P 2>/dev/null)" 2>/dev/null
        }

        # stalker: purple - slacker: bordeaux - kollok: orange - blinker: 'skin'
        if [[ -z $L_PS1_ALREADY_SET ]]; then
            if [[ -n $SSH_CLIENT ]]; then export _P_SSH=" (ssh)" ; fi
            export PROMPT_COMMAND=__rc_prompt_command  # Func to gen PS1 after CMDs
        fi

        alias prompt_default='export PROMPT_COMMAND=__rc_prompt_command'
        alias prompt_simple='export PROMPT_COMMAND=__rc_prompt_command2'

        ###############################
        #           ALIASES           #
        ###############################

        # Wrapper that creates a completion function on the fly for aliases that contain arguments.
        #
        # For aliases that don't take arguments you can directly set the completion function with e.g. 
        # complete -o default -F _git g   # Assuming 'g' is the alias and '_git' is
        # the completion function.
        #
        # A convention for completion is to prefix with '_', for example completion for
        # 'git' is '_git' and completion for 'git log' is '_git_log'.
        #
        # To find out what the completer function is called: complete -p <cmd>
        # (although sometimes the above doesn't work because e.g. fzf wraps around it).
        #
        # Usage (here '_my_git_remote_rm' is an arbitrary identifier):
        #
        # make-completion-wrapper _git _my_git_remote_rm git remote rm  # Create the compl func
        # complete -F _my_git_remote_rm grr                             # Assign to alias
        #
        make_completion_wrapper() {
            local comp_function_name="$1"
            local function_name="$2"
            local arg_count=$(($#-3))
            shift 2
            # shellcheck disable=SC2124
            local function="
                function $function_name {
                    ((COMP_CWORD+=$arg_count))
                    COMP_WORDS=( \"$@\" \${COMP_WORDS[@]:1} )
                    \"$comp_function_name\"
                    return 0
                }"
            eval "$function"
            # echo "$function_name"
            # echo "$function"
            
            # Not quite working yet...
            # make_completion_wrapper _git_remote _my_git_remote_rm git-remote rm
            # complete -o default -F _my_git_remote_rm grr
        }

        # Completion for aliases
        complete -o default -F _git g

        # TODO(rchossart): need to prefix this with condition of existence of fzf
        complete -F _fzf_file_completion -o default -o bashdefault e

        ### FZF - Awesome git previews

        ## FZF aliases / functions

        # Fzf local git repos
        gp() {
            local dir
            dir=$(find ~/git ~/src ~/geo ~/go/src/github.pie.*.com/pie -mindepth 1 -maxdepth 1 -type d |
                fzf "$@")
            [[ -n "$dir" ]] && cd "$dir"
        }

        ## FZF completions
        #
        # See https://github.com/junegunn/fzf/wiki/Examples-(completion)

        ## FZF key bindings

        # More fzf helpers.
        #_gib_join-lines() { local item; while read item; do echo -n "${(q)item} "; done; }
        # TODO: the eval is breaking syntax
        bind-git-helper() {
            local c
            bind '"\er": redraw-current-line'
            for c in "$@"; do
                eval "bind '\"\\C-g\\C-$c\": \"\$(_gib_git_$c)\\e\\C-e\\er\" '"
            done
        }

        bind-git-helper f b t h r
        unset -f bind-git-helper

        if [ -n "$TERM" ] && [ -x "$(which keychain)" ] && \
            [ -f "$HOME/.ssh/id_rsa" ] ; then
            keychain -q $HOME/.ssh/id_rsa
            . $HOME/.keychain/$(hostname)-sh
        fi


        [[ -f ~/.fzf.bash ]] && source ~/.fzf.bash

        # Load z (jump to directories, see `man z`) if brew is installed and z is too
        if exists brew; then
            # Load rupa's z if installed
            [ -f $(brew --prefix)/etc/profile.d/z.sh ] && source $(brew --prefix)/etc/profile.d/z.sh
        fi

        # Add the fuzzyfinder completion
        if [[ -n "$BASH" ]]; then
            complete -r z
            complete -F _fzf_complete_z -o default -o bashdefault z
        fi

        ;;

    *) true ;;  # Unknown shell

esac


#
## Other common additions from utilities
#

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# Pyenv (manage multiple python versions)
if exists pyenv; then
    eval "$(pyenv init - --no-rehash)"
fi

if exists rbenv; then
    # Faster, but needs to be rehashed manually from time to time.
    if [[ $RANDOM == *0 ]]; then
        eval "$(rbenv init -)"
    else
        eval "$(rbenv init - --no-rehash)"
    fi
fi

# vim: ft=sh foldmethod=marker sw=4 ts=4 sts=4 et
