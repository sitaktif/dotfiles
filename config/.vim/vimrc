" ---| BASIC HEADER |--- {{{

"Removes vi-compatibility (mandatory !)
set nocp

" File types and coloration have to be set here
syntax on
filetype plugin on
filetype indent on
set background=dark
set termencoding=utf-8

" Temporary fix to avoid a deprecation warning on 'import imp' in python3
if has('python3')
    silent! python3 1
endif

"}}}

" ---| SYSTEM-DEPENDANT SETTINGS |--- {{{

" Platform
let s:config_dir = expand('<sfile>:p:h')
if has('macunix') || system('uname -o') =~? '^darwin'
    let g:PLATFORM = 'mac'
elseif has('win32unix')
    let g:PLATFORM = 'cygwin'
elseif has('win32') || has('win64')
    let g:PLATFORM = 'win'
    let s:config_dir = s:path . '/vimfiles'
else
    let g:PLATFORM = 'other'
endif

if has("gui_running") || has("gui_vimr") " GUI mode
    colorscheme hybrid
    let &guicursor = &guicursor . ",a:blinkon0"
    set guioptions-=e "No gui-like tabs
    set guioptions-=T "No toolbar
    set guioptions-=m "No menubar
    set guioptions-=r "No scroolbar (right)
    set guioptions-=L "No scroolbar (left)
    set guioptions+=c "Console dialogs (no popup)
    "set guioptions+=a "Gui visual w/ mouse (yank to "*)
elseif has('gui') " A terminal with GUI support
    colorscheme ps_color
else
    if g:PLATFORM =~ "mac"
        " Tell the hybrid colorscheme that we set up iTerm correctly
        " See https://github.com/w0ng/vim-hybrid
        let g:hybrid_custom_term_colors = 1
        colorscheme hybrid
        hi CursorLine ctermbg=8 guibg=#282a2e  " Make the cursorline better in vim diff
        set t_ZH=[3m t_ZR=[23m " Set the italics code
    else
        colorscheme hybrid
    endif
endif

" Highlight current line, no underline/bold/whatnot
set cursorline
" hi CursorLine cterm=NONE term=NONE

" Orgmode multi-star should show only last star
hi link org_shade_stars NonText

"}}}

" ---| PLUGIN SETTINGS |--- {{{

" Vundle config
" Specify a directory for plugins
" - For Neovim: ~/.local/share/nvim/plugged
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

" General plugins

if has("nvim")                                      " NeoVim specific settings.
  Plug 'neoclide/coc.nvim', {'branch': 'release'} " Completion
endif

Plug 'itchyny/lightline.vim'                        " Nice looking status bar
Plug 'Shougo/echodoc.vim'                           " Complete func signatures in cmd
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'kana/vim-fakeclip'
Plug 'easymotion/vim-easymotion'
Plug 'tpope/vim-fugitive'
" Plug 'SirVer/ultisnips'  " Prevents editing when python extension fails to load.
Plug 'tpope/vim-obsession'
Plug 'git://github.com/majutsushi/tagbar'
Plug 'airblade/vim-gitgutter'
Plug 'godlygeek/tabular'  " Needed for plasticboy/vim-markdown
Plug 'rking/ag.vim'
Plug 'rizzatti/dash.vim'
Plug 'jceb/vim-orgmode'
Plug 'tpope/vim-speeddating' " Increase/decrease date with <C-a>/<C-x>
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-repeat'
Plug 'tommcdo/vim-exchange'
Plug 'tpope/vim-sleuth'
Plug 'ap/vim-readdir' " Simpler file browser / explorer.
Plug 'tpope/vim-abolish' " :Subvert (substitute with case preserve) and 'coerce to different casing' with crX: MixedCase (crm), camelCase (crc), snake_case (crs), UPPER_CASE (cru), dash-case (cr-), dot.case (cr.), space case (cr<space>), and Title Case (crt)
Plug 'terryma/vim-expand-region' " Incremental selection (like ctrl-w in IDEA)
Plug 'kana/vim-textobj-user' " requirement for textobj plugins
Plug 'kana/vim-textobj-line' " vil --> visual inner line
Plug 'takac/vim-hardtime' " Disable key repeat.
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/gv.vim'
Plug 'junegunn/vim-easy-align'
Plug 'justinmk/vim-sneak' " multiline f-motion with two letters
Plug 'sjl/gundo.vim' " Interactive undo tree
Plug 'michaeljsmith/vim-indent-object' " ii object for 'inner indent' (useful for python)
Plug 'vim-scripts/taglist.vim'
Plug 'qpkorr/vim-bufkill'
Plug 'vim-scripts/a.vim'
Plug 'fidian/hexmode'

if exists('##TextYankPost')
  Plug 'machakann/vim-highlightedyank'
  let g:highlightedyank_highlight_duration = 100
endif

" Color
Plug 'scwood/vim-hybrid'

" FT Plugs
Plug 'vim-syntastic/syntastic'
" Plug 'neomake/neomake'
Plug 'kassio/neoterm'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'elixir-lang/vim-elixir'
Plug 'kballard/vim-swift'
Plug 'plasticboy/vim-markdown'
Plug 'kylef/apiblueprint.vim'
Plug 'nvie/vim-rst-tables'
Plug 'honza/vim-snippets'
Plug 'pangloss/vim-javascript'
Plug 'mxw/vim-jsx'
Plug 'rust-lang/rust.vim'

" Python
Plug 'alfredodeza/pytest.vim'
Plug 'python-rope/ropevim'
Plug 'nvie/vim-flake8'

" Initialize plugin system
call plug#end()

"  }}}

" ---| GLOBAL SETTINGS |--- {{{

" Indentation and tabs
set autoindent "Indent (based on above line) when adding a line
set tabstop=4 "A tab is worth 2 spaces
set softtabstop=4 "See 2 spaces per tab
set expandtab "Use spaces instead of tabs
set shiftwidth=4 "Indent is 2
set shiftround
set nosmartindent "Cindent is better (it is set in ftplugin)

" Don't change indentation when inserting # as first char.
" Some filetype plugins override this so make it an autocmd.
autocmd BufNewFile,BufReadPost * set indentkeys-=0#
autocmd BufNewFile,BufReadPost * set cinkeys-=0#

" Editing layout
set formatoptions+=ln "See :h 'formatoptions' :)
set backspace=start,indent,eol "Fix backspace
set linebreak "Break lines at words, not chars
set scrolloff=4 "When moving vertical, start scrolling 4 lines before reaching bottom
set modeline "Vim mini-confs near end of file
set modelines=5
set list listchars=tab:Â»Â·,trail:Â·,nbsp:Â·            " Display extra whitespace.
set fileformats+=mac
set nojoinspaces
set nostartofline "Don't move the cursor to start of line after a command

" Search
set wrapscan "Continue to top after reaching bottom
set hlsearch "Highlight search
set incsearch "See results of search step by step
set ignorecase
set smartcase "Do not ignore case if there is a MAJ in pattern
if exists('&inccommand')| set inccommand=split| endif " Show search and replace as you type.

" Parenthesis
set showmatch "Parenthesis matches
set matchtime=2 "Show new matching parenthesis for 2/10th of sec

" System
set vb t_vb="" "Removes the Fucking Bell Of Death...
set history=2048 "Memorize 1024 last commands
set updatetime=300 "Update swap (and showmark plugin) every 300ms

" Windows and buffers
set splitright " Vsplit at right
set hidden "To move between buffers without writing them.  Don't :q! or :qa! frivolously!

" Recent files history
if has("nvim")
  set shada=!,'1000,<100,s100,h " Save more recent files
endif

" Allow using <C-W>+++++++++++++++ to make a window bigger, etc.
nmap              <C-W>>     <C-W>><SID>ws|         " Adds mappings to make Ctrl-W -/+/</>
nmap              <C-W><     <C-W><<SID>ws|         " â†³ repeatable, so you can press Ctrl-W
nnoremap <script> <SID>ws>   <C-W>><SID>ws|         " â†³ and then hold > to increase width,
nnoremap <script> <SID>ws<   <C-W><<SID>ws|         " â†³ or hold - to decrease height.
nmap              <C-W>+     <C-W>+<SID>ws|         " â†³ Note that +,<, and > need the shift key.
nmap              <C-W>-     <C-W>-<SID>ws|         " â†³ Use <Leader> < or > for bigger
nnoremap <script> <SID>ws+   <C-W>+<SID>ws|         " â†³ modifications, and this for smaller
nnoremap <script> <SID>ws-   <C-W>-<SID>ws|         " â†³ tweaks.
nmap              <SID>ws    <Nop>

"  Command mode options
set wildmenu "Completions view in ex mode (super useful !)
set wildignore=*.o,*.obj,*.bak,*.exe,*.pyc,*.ps,*.pdf,*.cmo,*.cmi,*.cmx "Don't complete bin files
set cmdheight=1 "Command line height
set laststatus=2 "When to show status line (2=always)
" Set statusline - silently fail if vim lacks version / plugins
set statusline=%F%m%r%h%w\%=[%4l/%-4L\ %3v]\ [%p%%]
if (v:version >= 700)
    set statusline=%F%m%r%h%w\%=[%4l/%-4L\ %3v/%-3{len(getline('.'))}]\ [%p%%]
    silent! call fugitive#statusline() " We have to call it first in order to test existence
    if exists('*fugitive#statusline')
        set statusline=%F%m%r%h%w\ %{fugitive#statusline()}\ \%=\ [%4l/%-4L\ %3v/%-3{len(getline('.'))}]\ [%p%%]
    endif
endif
set ruler "Show line,col in statusbar
set number "Show lines
set noshowmode  " Do not show --INSERT-- etc., needed for the echodoc plugin.
set showcmd "Show beginning of normal commands (try d and see at bottom-right)

" Grep / find options
set path=.,/usr/include,,**                         " Add ** to search path for gf, etc.
if executable("rg")
  set grepprg=rg\ -S\ --vimgrep\ --no-heading       " Use ripgrep for file searching.
  set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

" Match the quickfix error format too. This allows editing the quickfix window
" by doing ':set modifiable' on it, deleting items and running ':cgetbuffer'.
set errorformat+=,%f\|%l\ col\ %c\|%m

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc,.job

" TODO: This is a try. See if it is ok
set tags=tags,./tags,../tags,../../tags
set previewheight=15 " Make the preview window 15 lines high (default is 12)

" Auto-folding and auto-layout (e.g. for vim help files)
" TODO: do it by filetype
set foldenable "Automatic folding
set foldmethod=marker "Folds automatically between {{{ and }}}

" Mouse
set mouse=a "Use mouse (all)
if !has('nvim')
    set ttymouse=xterm2 "Mouse dragging in iTerm
endif

"}}}

" ---| MORE COMPLEX FUNCTIONS |--- {{{
"

" Run a command and interpret the output in the quickfix window
command! -nargs=+ -complete=file CRun cexpr system(<q-args>)

" Run a command and interpret the output in the location window
command! -nargs=+ -complete=file LRun lexpr system(<q-args>)

" Open selected text with native open command, used with `<Leader>o` mappings.
" This is an operator pending map
function! OpenUrl(type)
  if a:type ==# 'v'| execute "normal! `<v`>y"| " If in charwise visual mode, copy selected URL.
  elseif a:type ==# 'char'| execute "normal! `[v`]y"| " If given a text object URL, copy it.
  else| return
  endif

  " This doesn't work with /usr/bin/vim on macOS (doesn't identify as macOS).
  if has('mac')| let openCmd = 'open'| else| let openCmd = 'xdg-open'| endif
    silent execute "! " . openCmd . " " . shellescape(@@, 1)| " Escape URL and pass as arg to open command.
    echo openCmd . " " shellescape(@@, 1)| " Echo what we ran so it's visible.
endfunction

nnoremap <Leader>o :set operatorfunc=OpenUrl<CR>g@
vnoremap <Leader>o :<c-u>call OpenUrl(visualmode())<CR>

if !exists(":DiffOrig")
command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
            \ | wincmd p | diffthis
endif

func! DeleteTrailingWS()
    let lnum = line(".")
    let cnum = col(".")
    silent! keepjumps %s/\s\+$//ge
    silent! keepjumps call cursor(lnum, cnum)
endfunc
autocmd BufWrite *.sh,*.bash,*.java,*.py,*.rb,*.h,*.hpp,*.c,*.cpp,*.md,*.rst :call DeleteTrailingWS()

"}}}

" ---| MAPPINGS |--- {{{

"" HANDY MAPPINGS

" Single quote is sufficient (I use backquote for tabnext)
noremap ' `

" Select last pasted text
nnoremap gp `[v`]

" Remove search hilights
noremap <C-l> :noh<CR><C-l>

" I don't really use ex mode (maybe I should but the current mapping is crap)
nnoremap Q :pclose <bar> :cclose <bar> lclose <bar> helpclose <bar> nohlsearch <cr>

" Common typos when saving/editing
nnoremap q: :q
cabbr w1 :w!
cabbr q1 :q!
command! -bang W w
command! -bang Wq wq
command! -bang WQ wq
command! -bang E e
command! -bang Q q
command! -bang Qa qa

" Forgot to sudo?
if g:PLATFORM != 'win'
    command! WW w !sudo tee % > /dev/null
endif

" Make it obvious when a non-space-blank is inserted
imap Â  \<non_space_blank\>

" Execute current file
map <F9> :!%

"" REDEFINITIONS

" Navigate between buffers.
nnoremap <cr> :bn<cr>
nnoremap <bs> :bp<cr>
" But in command-line mode (mapped to 'q:', 'q/', etc.), enter validates the
" command/search/etc.
au CmdWinEnter * nnoremap <buffer> <cr> <cr>
au CmdWinEnter * nnoremap <buffer> <bs> <bs>

" Quickfix next/previous
nnoremap <space> :cn<CR>
nnoremap ` :cp<CR>

" Beginners that want to have a good habit
" (i.e. use hjkl instead of <left>,<down>,<up>,<right>) can use:
"nmap <left> :echo "Left is 'h' !"<cr>
"nmap <down> :echo "Down is 'j' !"<cr>
"nmap <up> :echo "Up is 'k' !"<cr>
"nmap <right> :echo "Right is 'l' !"<cr>

" Copy paste
nnoremap <Leader>y "+y|                    " Copy to clipboard (normal mode).
nnoremap <Leader>Y :%y+<CR>|               " Copy file to clipboard (normal mode).
nnoremap <Leader>p "+p|                    " Paste from clipboard after cursor.
nnoremap <Leader>P "+P|                    " Paste from clipboard before cursor.

" Diff
noremap <leader>dt :diffthis<cr>
noremap <leader>wdt :windo diffthis<cr>
noremap <leader>do :diffoff<cr>
noremap <leader>wdo :windo diffoff<cr>

" Various options
noremap <leader>sl :set list!<cr>
noremap <leader>sw :set wrap!<cr>
noremap <leader>sp :set paste!<cr>
noremap <leader>sn :set number!<cr>

" Spell checking
noremap <leader>st :setlocal spell! spelllang=en spellcapcheck=<cr>
noremap <leader>sc :setlocal nospell<cr>
noremap <leader>se :setlocal spell spelllang=en spellcapcheck=<cr>
noremap <leader>sf :setlocal spell spelllang=fr spellcapcheck=<cr>
noremap <leader>sd :setlocal spell spelllang=de spellcapcheck=<cr>

" Vim
noremap <leader>vev :e ~/.vim/vimrc<cr>
noremap <leader>vsv :so ~/.vim/vimrc<cr>

" Cleanup
nnoremap <leader>S :%s/\s\+$//<cr>

" Handy ex-command remaps
if has("nvim")
  " Current file's directory. Easy to type with <C-.><C-/> (the latter will
  " just input a normal slash).
  cnoremap <C-.> %:h
endif

" Git
" TODO: create a function that takes all the pending changes to commit and put
" them into the quickfix window
function! GitDiffQuickfix(...)
  " Get the commit hash if it was specified
  " let commit = a:0 == 0 ? '' : a:1

  " Get the result of git show in a list
  let git_diff_changes = split(system('git diff --unified=0 HEAD | grep -E "^(\+\+\+|@@)"'), '\n')

  " Create the dictionnaries used to populate the quickfix list
  let list = []
  let file = ''
  let line_nr = 0
  for change in git_diff_changes
    if match(change, '^+++ b/') != -1
      let file = substitute(change, '^+++ b/', '', '')
      let line_nr = 0
    elseif match(change, '^@@ [^+]\++[0-9]\+') != -1
      let line_nr = substitute(change, '^@@ [^+]\++\([0-9]\+\).*', '\1', '')
    else
      echoerr 'GitDiffQuickfix did not expect line: ' . change
      return
    endif

    " Add the quickfix item if we have full info
    if line_nr > 0
      if file == ''
        echoerr 'GitDiffQuickfix did not expect "line_nr" to be set but "file" to be unset'
      else
        let dic = {'filename': file, "lnum": line_nr}
        call add(list, dic)
      endif
    endif
  endfor

  " Populate the qf list
  call setqflist(list)
  copen
  cfirst
endfunction

" Search for visually (multiline) selected text with * and #
vnoremap <silent> * :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>


" Some accentuated letters
if g:PLATFORM =~ 'mac'
    noremap! ÃŸ Ã©
    noremap! âˆ‚ Ãª
    noremap! Æ’ Ã¨
    noremap! Âµ Ã¹
endif

" Fix shift-backspace in some terminals
noremap!  <bs>

"}}}

" ---| ABBREVIATIONS |--- {{{

" They are not that useful in practice, I found :-)

"}}}

" ---| AUTOCOMMANDS |--- {{{

" Keyword dictionary completion with syntax
" autocmd FileType * exec('setlocal dict+='.$VIMRUNTIME.'/syntax/'.expand('<amatch>').'.vim')

" always jump back to the last position when re-entering a file
if has("autocmd")
    autocmd BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif
endif

"}}}

" ---| PLUGINS |--- {{{

"" COC - completion

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Silence the ins-completion-menu messages in the command line
" such as '-- XXX completion (YYY)', 'match 1 of 2', 'The only match', etc.
if has("patch-7.4.314")
  set shortmess+=c
endif

" Use <TAB> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <TAB> could be remapped by other vim plugin, try `:verbose imap <TAB>`.
if exists('*complete_info')
  inoremap <expr> <TAB> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<TAB>"
else
  inoremap <expr> <TAB> pumvisible() ? "\<C-y>" : "\<C-g>u\<TAB>"
endif

" Show the hints (to the right of expressions) as light grey.
hi CocHintSign ctermfg=239 guifg=#606060

" Close the preview window when completion is done.
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use escape to cancel completion and close the completion popup.
" Actually it's annoying because it forces you to type <esc> twice to save.
" inoremap <expr> <esc> pumvisible() ? "\<C-e>" : "\<esc>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

if exists('g:did_coc_loaded')
    " Highlight the symbol and its references when holding the cursor.
    autocmd CursorHold * silent call CocActionAsync('highlight')
endif

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

"" Lightline - status line

" Display the file path (not just the basename)
let g:lightline = {
\   'component_function': {
\     'filename': 'LightLineFilename'
\   }
\ }
function! LightLineFilename()
  return fnamemodify(expand('%'), ':~:.')
endfunction

let g:lightline.active = {
\ 'left': [ [ 'mode', 'paste' ],
\           [ 'readonly', 'filename', 'modified' ] ],
\ 'right': [ [ 'lineinfo' ],
\            [ 'percent' ],
\            [ 'fileformat', 'fileencoding', 'filetype' ] ] }
let g:lightline.inactive = {
\ 'left': [ [ 'filename', 'modified' ] ],
\ 'right': [ [ 'lineinfo' ],
\            [ 'percent' ] ] }
let g:lightline.tabline = {
\ 'left': [ [ 'tabs' ] ],
\ 'right': [ [ 'close' ] ] }

" line:col/linewidth
let g:lightline.component = {
\ 'lineinfo': '%3l:%-2v/%{strwidth(getline("."))}' }

"" Neoterm
let g:neoterm_default_mod='belowright'


"" Sneak vim
nmap              f <Plug>Sneak_f|                  " Use sneak for f (multiline+highlight).
nmap              F <Plug>Sneak_F|                  " â†³             F
nmap              t <Plug>Sneak_t|                  " â†³             t
nmap              T <Plug>Sneak_T|                  " â†³             T

let g:sneak#label = 1 " Enable label mode (like easymotion)
let g:sneak#s_next = 1 " Allow s/S to go to the next/prev sneak value


" echodoc (cmdline function signature completion)
let g:echodoc#enable_at_startup = 1
let g:echodoc#events = ['CompleteDone']
"let g:echodoc#events = ['CompleteDone', 'BufWritePost']
if has('nvim-0.3.2') | let g:echodoc#type = 'virtual' | endif
set cmdheight=2


" LanguageServer (https://github.com/autozimu/LanguageClient-neovim)
" 
"     "\ 'rust':   ['rls'],
" let g:LanguageClient_serverCommands = {
"     \ 'python': ['/usr/local/bin/pyls'],
"     \ 'go':     ['/Users/rchossart/go/bin/go-langserver'],
"     \ 'cpp': ['cquery', '--log-file=/tmp/cq.log'],
"     \ 'c': ['cquery', '--log-file=/tmp/cq.log'],
"     \ }
" if executable('bash-language-server')
"   let g:LanguageClient_serverCommands['sh'] = ['bash-language-server', 'start']
" endif
" 
" let g:LanguageClient_useVirtualText = 0  " Do not use the 'virtual' area on the right to display diagnostics.
" let g:LanguageClient_diagnosticsList = "Location" " Don't overwrite quickfix list with linter/checker output.
" let g:LanguageClient_settingsPath = expand('~/.config/nvim/langserver-settings.json')


" nnoremap <F5> :call LanguageClient_contextMenu()<CR>
" " Or map each action separately
" "nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> <F6> :call LanguageClient#textDocument_rename()<CR><Paste>
" 
" nnoremap <silent> gh :call LanguageClient#textDocument_hover()<CR>
" nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
" nnoremap <silent> gr :call LanguageClient#textDocument_references()<CR>
" nnoremap <silent> gs :call LanguageClient#textDocument_documentSymbol()<CR>

"" FZF (FuzzyFinder)
set rtp+=/usr/local/opt/fzf

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
"
" TODO(rchossart): I want to keep ctrl-n/ctrl-p for up/down and remap
" next-history/previous-history but I'm seeing some weird behaviours. Let's
" dig further later.
" let g:fzf_history_dir = '~/.local/share/fzf-history'

nnoremap <c-p> :Files<cr>
nnoremap <c-n> :Buffers<cr>
nnoremap <c-q> :History<cr>

" FZF - Ripgrep
" Use bang (!) to search gitignored files.
" Use '?' to display a preview of the file in fzf.
" TODO(rchossart): are we overloading the meaning of <bang> here since we pass
" it to fzf#vim#with_preview? --> ANSWER: yes, <bang> also does fullscreen FZF...
" "
" Perform a ripgrep search and put the results in fzf. Use '?' to toggle preview.
" rg_regex (str): the rg search regex
" rg_opts (list[str]): a list of options to pass to rg
" fzf_opts (list[str]): a list of options to pass to fzf. E.g. ['--query', 'foo']
" fzf_fullscreen (bool/int): 1 to run in fullscreen, 0 otherwise
function! s:fzf_rg(rg_query, rg_opts, fzf_opts, fzf_fullscreen)
  call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.join(a:rg_opts).' '.shellescape(a:rg_query),
  \   1,
  \   fzf#vim#with_preview({'options': a:fzf_opts}, 'right:50%:hidden', '?'),
  \   a:fzf_fullscreen)
endf

" Why is this not a built-in Vim script function?!
" Credits to xolox@Stackoverflow
" https://stackoverflow.com/questions/1533565/how-to-get-visually-selected-text-in-vimscript
function! s:get_visual_selection()
    let [line_start, column_start] = getpos("'<")[1:2]
    let [line_end, column_end] = getpos("'>")[1:2]
    let lines = getline(line_start, line_end)
    if len(lines) == 0
        return ''
    endif
    let lines[-1] = lines[-1][: column_end - (&selection == 'inclusive' ? 1 : 2)]
    let lines[0] = lines[0][column_start - 1:]
    return join(lines, "\n")
endfunction

" RipGrep files
command! -bang -nargs=* Rg call s:fzf_rg(<q-args>, [''], ['--select-1'], <bang>0)
command! -bang -nargs=* RgVisual call s:fzf_rg(s:get_visual_selection(), [''], [], <bang>0)
command! -bang -nargs=* RG Rg

" RipGrep All files including git ignored ones and hidden files
command! -bang -nargs=* Rga call s:fzf_rg(<q-args>, ['-uu'], ['--select-1'], <bang>0)
command! -bang -nargs=* RgaVisual call s:fzf_rg(s:get_visual_selection(), ['-u'], [], <bang>0)
command! -bang -nargs=* RGA Rga

" TODO(rchossart): use the higher level function
" Search current selection with Rg in FZF with <c-s>
nnoremap <c-s> :Rg<space>
nnoremap g<c-s> :Rga<cr>
vnoremap <C-s> :<C-u>RgVisual<cr>
vnoremap g<C-s> :<C-u>RgaVisual<cr>

" TODO(rchossart): these work; I'm just in the process of creating a common
" function (s:fzf_rg above) to avoid too much repetition.
"
" command! -bang -nargs=* Rg
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case '.
"   \   (<bang>0 ? '-u ' : '').shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview('right:50%:hidden', '?'),
"   \   <bang>0)
" command! RG Rg
" 
" command! -bang -nargs=* RgCurrentWord
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case '.
"   \   (<bang>0 ? '-u ' : '').shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview({'options': ['--query', expand('<cword>')]}, 'right:50%:hidden', '?'),
"   \   <bang>0)
" 
" 
" command! -bang -nargs=* RgVisualSelection
"   \ call fzf#vim#grep(
"   \   'rg --column --line-number --no-heading --color=always --smart-case '.
"   \   (<bang>0 ? '-u ' : '').shellescape(<q-args>), 1,
"   \   fzf#vim#with_preview({'options': ['--query', s:get_visual_selection()]}, 'right:50%:hidden', '?'),
"   \   <bang>0)


function! s:fzf_build_quickfix_list(lines)
  if len(a:lines) == 0
    return
  elseif len(a:lines) == 1
    execute('edit ' . get(a:lines, 0))
  else
    call setqflist(map(copy(a:lines), '{ "filename": v:val , "lnum": 1, "col": 1 }'))
    copen
    cc
  endif
endfunction

function! s:fzf_build_location_list(lines)
  if len(a:lines) == 0
    return
  elseif len(a:lines) == 1
    execute('edit ' . get(a:lines, 0))
  else
    call setloclist(win_getid(), map(copy(a:lines), '{ "filename": v:val , "lnum": 1, "col": 1 }'))
    lopen
    lc
  endif
endfunction

" Actions when editing the stuff in Vim - corresponds to vim commands, not FZF
" commands.
let g:fzf_action = {
  \ 'ctrl-q': function('s:fzf_build_quickfix_list'),
  \ 'enter': function('s:fzf_build_quickfix_list'),
  \ 'ctrl-l': function('s:fzf_build_location_list'),
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-x': 'split',
  \ 'ctrl-v': 'vsplit' }

" UltiSnips
let g:UltiSnipsSnippetDir = 'UltiSnips'
let g:UltiSnipsExpandTrigger = '<nop>'  " XXX: this is temporary to test coc.vim completion
let g:UltiSnipsListSnippets = '<c-x><tab>'
let g:UltiSnipsJumpForwardTrigger='<C-j>'
let g:UltiSnipsJumpBackwardTrigger='<C-k>'

" UltiSnips - ft specific
let g:ultisnips_python_quoting_style='single'

" Taglist plugin
let Tlist_Use_Right_Window = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Enable_Fold_Column = 0
"
"let Tlist_Compact_Format = 1
let Tlist_Display_Prototype = 1
let Tlist_File_Fold_Auto_Close = 1 " Only display current file
let Tlist_Inc_Winwidth = 1
let Tlist_WinWidth = 48
"
" Taglist OCaml language
let g:tlist_ocaml_settings = 'ocaml;m:module;t:type;d:definition'
let g:tlist_omlet_settings = 'ocaml;m:module;t:type;d:definition'

"Panel with list of functions, vars...
map <F11> :TagbarToggle<cr>
let g:tagbar_autoclose = 1

" Markdown
let g:vim_markdown_folding_disabled = 1
hi lin htmlH1 Constant
hi lin htmlH2 Preproc
hi lin htmlH3 Special

"" Gundo plugin - undo tree :)
map <leader>g :GundoToggle<CR>

"" readdir (simpler file explorer)
let g:loaded_netrwPlugin = 1

"" Unimpaired
" Unmap <p, >p etc. as it makes < wait for another keystroke for a bit.
if !exists('g:nremap')
  let g:nremap = {}
endif
let g:nremap['<p'] = ''
let g:nremap['<P'] = ''
let g:nremap['>p'] = ''
let g:nremap['>P'] = ''

"}}}

" ---| FILETYPE PLUGINS |--- {{{

"" GIT

nmap [c <Plug>(GitGutterPrevHunk)| " Previous SCM change
nmap ]c <Plug>(GitGutterNextHunk)| " Next SCM change

"" Fugitive
"nnoremap <buffer> <silent> + :<C-U>silent execute <SID>StageToggle(line('.'),line('.')+v:count1-1)<CR>
"xnoremap <buffer> <silent> + :<C-U>silent execute <SID>StageToggle(line("'<"),line("'>"))<CR>

" Format each line individually (useful for git commits)
autocmd BufReadPre COMMIT_EDITMSG nnoremap gQ :g/^[^#]/norm gqq<cr>gg:noh<cr>

" GV (simple git vizualizer, needs fugitive)
autocmd! FileType GV nmap <buffer> <c-n> ]]o
autocmd  FileType GV nmap <buffer> <c-p> [[o

"" Vim files
autocmd FileType vim noremap <buffer> <f5> :so %<cr>
autocmd FileType vim vnoremap <buffer> <f5> :<c-u>exe join(getline("'<","'>"),'<bar>')<cr>

"" HTML
"Jump to end of tag
autocmd FileType html,htmldjango,xml,xhtml imap <buffer> <c-l> <esc>l%a

" Shell / Bash
autocmd FileType sh set iskeyword-=.

" XML
com! XMLClean 1,$!xmllint --format -

"" Bash
let g:is_bash = 1 " Make bash default rather than sh

" Shellcheck
autocmd FileType sh setlocal makeprg=shellcheck\ -f\ gcc\ %

"" Python

autocmd FileType python setlocal makeprg=python\ setup.py

" Requirements.txt
autocmd BufReadPost requirements*.txt set comments=b:#

autocmd BufNewFile,BufRead * if empty(&filetype) | execute 'set comments=' | endif

" jedi
let g:jedi#smart_auto_mappings = 0  " Do not complete 'import' when writing 'from foo<space>'

" vim-snippets
let g:ultisnips_python_style = "google"
let g:ultisnips_python_triple_quoting_style = "double"

" Pyflakes
if !has('python')
    let b:did_pyflakes_plugin = 1
endif
"let g:pyflakes_use_quickfix = 0

" Sytastic Settings
let g:syntastic_python_checkers = ["flake8"]
"
" Pep8:
" E201    whitespace after â€˜(â€˜
" E202    whitespace before â€˜)â€™
" E127    continuation line over-indented for visual indent
" E128    continuation line under-indented for visual indent
"
" PyLint:
" C0103   Invalid constant/variable name (1 or 2 letter, lowercase constant, ...)
let g:syntastic_python_flake8_args = "--max-line-length=160 --ignore=C0103"

" PyTest - Execute the tests
autocmd FileType python nnoremap <buffer> <silent> <Leader>tf <Esc>:Pytest file<CR>
autocmd FileType python nnoremap <buffer> <silent> <Leader>tc <Esc>:Pytest class<CR>
autocmd FileType python nnoremap <buffer> <silent> <Leader>tm <Esc>:Pytest method<CR>
" PyTest - Cycle through test errors
autocmd FileType python nnoremap <buffer> <silent> <Leader>tn <Esc>:Pytest next<CR>
autocmd FileType python nnoremap <buffer> <silent> <Leader>tp <Esc>:Pytest previous<CR>
autocmd FileType python nnoremap <buffer> <silent> <Leader>te <Esc>:Pytest error<CR>

"" Rust

autocmd FileType rust inoremap <buffer> {<cr> {<CR><BS>}<Esc>ko
autocmd FileType rust noremap <F10> :!cargo run --release<cr>
autocmd FileType rust if get(g:, 'neoterm_loaded', 0) | noremap <C-e><F10> :T cargo run --release<cr> | endif
autocmd FileType rust setlocal makeprg=RUST_BACKTRACE=1\ cargo

"" Bazel
autocmd FileType bzl inoremap <buffer> {<CR> {<CR>}<ESC>ko<TAB>

"}}}

" ---| INCLUDES |--- {{{

" Autocorrections
exec 'source ' . s:config_dir . '/sitaktif/autocorrect_fr_vimrc.vim'
exec 'source ' . s:config_dir . '/sitaktif/autocorrect_en_vimrc.vim'

"}}}
