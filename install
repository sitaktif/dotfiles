#!/bin/bash

set -eu

# Colors
BLD=$(tput bold)
RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YLW=$(tput setaf 3)
BLU=$(tput setaf 4)
PPL=$(tput setaf 5)
CYN=$(tput setaf 6)
WHT=$(tput setaf 7)
RST=$(tput sgr0)

THIS_DIR=$(dirname "$0")
REL_DOT_DIR="git/dotfiles/config"  # Replace this with repo path

INSTALL=true

parse_args() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            --no-install|--link)
                INSTALL=false
                shift ;;
        esac
    done
}

linkit() {
    local rel_target_path=$1
    local base_link_src=$2
    local src="$base_link_src/$rel_target_path"
    local target=~/"$rel_target_path"

    # Case where the link is set already
    if [[ -h "$target" ]] && [[ $(readlink "$target") == "$src" ]]; then
        printf "%-48s [${GRN}already linked${RST}]\n" "$target"
    # Case where a file is present but isn't the expected link, and where we can create a backup
    elif { [[ -h "$target" ]] || [[ -e "$target" ]] ; } && [[ ! -e "$target.bak" ]]; then
        printf "%-48s [${YLW}wrong link - replacing link and backing up old file into %s.bak${RST}]\n" "$target" "$target"
        mv "$target" "$target.bak"
        ln -s "$src" "$target"
    # Case where a file is present but isn't the expected link, but where a backup already exists
    elif { [[ -h "$target" ]] || [[ -e "$target" ]] ; } && [[ -e "$target.bak" ]]; then
        printf "%-48s [${RED}wrong link and back up already exists in %s.bak${RST} - skipping]\n" "$target" "$target"
    # Case where the target doesn't exist yet (happy path)
    else
        printf "%-48s [${GRN}creating link${RST}]\n" "$target"
        ln -s "$src" "$target"
    fi
}

linkall() {
    (
        # We will list directories and files from there
        cd "$THIS_DIR/config"

        mkdir -p ~/.config
        for rel_target_path in .[^.]*; do
            [[ $rel_target_path == .config ]] && continue
            linkit "$rel_target_path" "$REL_DOT_DIR"
        done

        # Create links inside ~/.config/ (the relative symlinks will start with ../)
        for rel_target_path in .config/*; do
            linkit "$rel_target_path" "../$REL_DOT_DIR"
        done
    )
}

defaults_dict_haskey() {
    local domain=$1
    local key=$2
    local dict_key=$3
    defaults read "$domain" "$key" | sed -n 's/"\{0,1\}\([^"]*\)"\{0,1\} = .*/\1/p' | grep -qF "$dict_key"
}

defaults_dict_get() {
    local domain=$1
    local key=$2
    local dict_key=$3
    # read | add key quote in case it's only one word | grep key | show key
    defaults read "$domain" "$key" |
        sed -n 's/^[[:space:]]*"\{0,1\}\([^"]*\)"\{0,1\} = \(.*\)/"\1" = \2/p' |
        grep -F "\"$dict_key\"" |
        sed -n 's/[[:space:]]*"\{0,1\}[^"]*"\{0,1\}[[:space:]]*=[[:space:]]*"\{0,1\}\([^"]*\)"\{0,1\};/\1/p' |
        sed 's/\\\\/\\/g'
}

# Set the value to the macOS "defaults" dict if not set yet
defaults_dict_set_val() {
    local domain=$1
    local key=$2
    local dict_key=$3
    local dict_val=$4

    if ! defaults read com.apple.universalaccess com.apple.custommenu.apps | grep -Fq "$domain"; then
        defaults write com.apple.universalaccess com.apple.custommenu.apps -array-add "$domain"
    fi

    # Create the dict value if it doesn't exist
    if ! defaults read "$domain" "$key" >/dev/null 2>&1; then
        defaults write "$domain" "$key" -dict
    fi

    # Set the value
    if ! defaults_dict_haskey "$domain" "$key" "$dict_key"; then
        printf "%-32s %-32s -> [$YLW%s$RST]\n" "'$domain'" "'$key'" "added '$dict_key' --> '$dict_val'"
        defaults write "$domain" "$key" -dict-add "$dict_key" "$dict_val"
        return
    fi

    local dict_oldval
    dict_oldval=$(defaults_dict_get "$domain" "$key" "$dict_key")
    if [[ "$dict_oldval" != "$dict_val" ]]; then
        printf "%-32s %-32s -> [$YLW%s$RST]\n" "'$domain'" "'$key'" "changed '$dict_key' from '$dict_oldval' to '$dict_val'"
        defaults write "$domain" "$key" -dict-add "$dict_key" "$dict_val"
    else
        printf "%-32s %-32s -> [$GRN%s$RST]\n" "'$domain'" "'$key'" "'$dict_key' already set to '$dict_val'"
    fi
}

# If you get:
#   defaults read foo bar -> 1
#   defaults read-type foo bar -> Type is integer
# Then you should set with:
#   defaults_write foo bar -int 1
defaults_write() {
    domain="$1"
    key="$2"
    val_type="$3"
    val="$4"

    current_val="$(defaults read "$domain" "$key" 2>/dev/null)"

    if [[ "$current_val" == "$val" ]]; then
        printf "%-32s %-32s -> [$GRN%s$RST]\n" "'$domain'" "'$key'" "already set to '$val'"
        return 0
    fi

    printf "%-32s %-32s -> [$YLW%s$RST]\n" "'$domain'" "'$key'" "changed from '$current_val' to '$val'"
    defaults write "$domain" "$key" "$val_type" "$val"
}

set_mac_prefs() {
    echo "* Setting keyboard/trackpad preferences"

    # Set Keyboard Shortcuts -> App Shortcuts
    # To add your own, first add them in System Preferences -> Keyboard ->
    # Shortcuts -> App Shortcuts, then find them in the output of:
    #   defaults read  OR  defaults find NSUserKeyEquivalents
    # Use the existing and the help output of `defaults` to work it out.
    # @command, ~option, ^ctrl, $shift

    {
    # Global ('Apple Global Domain')
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Hide Others' '@~^$7'
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Minimise' '@~^$9'
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Minimise All' '@~^$8'
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Minimize' '@~^$-'
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Minimize All' '@~^$0'
    defaults_dict_set_val NSGlobalDomain NSUserKeyEquivalents 'Merge All Windows' '@~^/'
    } &

    {
    # Keynote
    defaults_dict_set_val 'com.apple.iWork.Keynote' NSUserKeyEquivalents '\033Arrange\033Align Objects\033Bottom' '@~\U2193'
    defaults_dict_set_val 'com.apple.iWork.Keynote' NSUserKeyEquivalents '\033Arrange\033Align Objects\033Left' '@~\U2190'
    defaults_dict_set_val 'com.apple.iWork.Keynote' NSUserKeyEquivalents '\033Arrange\033Align Objects\033Right' '@~\U2192'
    defaults_dict_set_val 'com.apple.iWork.Keynote' NSUserKeyEquivalents '\033Arrange\033Align Objects\033Top' '@~\U2191'
    defaults_dict_set_val 'com.apple.iWork.Keynote' NSUserKeyEquivalents 'Play Slideshow' '@~o'
    } &

    {
    # Numbers
    defaults_dict_set_val 'com.apple.iWork.Numbers' NSUserKeyEquivalents 'Delete Column' '@~$-'
    defaults_dict_set_val 'com.apple.iWork.Numbers' NSUserKeyEquivalents 'Delete Columns' '@~$-'
    defaults_dict_set_val 'com.apple.iWork.Numbers' NSUserKeyEquivalents 'Delete Row' '@~-'
    defaults_dict_set_val 'com.apple.iWork.Numbers' NSUserKeyEquivalents 'Delete Rows' '@~-'
    } &

    {
    # Notes
    defaults_dict_set_val 'com.apple.Notes' NSUserKeyEquivalents '\033Format\033Font\033Remove Style' '@$t'
    defaults_dict_set_val 'com.apple.Notes' NSUserKeyEquivalents '\033Format\033Title' '@$i'
    } &

    {
    # Mail
    defaults_dict_set_val 'com.apple.mail' NSUserKeyEquivalents '\033Message\033Mark as Read' '@^$d'
    defaults_dict_set_val 'com.apple.mail' NSUserKeyEquivalents '\033Message\033Mark as Unread' '@^$d'
    } &

    {
    # Safari
    defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033File\033Export as PDF...' '@~p'
    defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033Window\033Show Next Tab' '@~l'
    defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033Window\033Show Previous Tab' '@~h'
    # defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033Window\033Show Next Tab' '@~\U2192'
    # defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033Window\033Show Previous Tab' '@~\U2190'
    defaults_dict_set_val 'com.apple.Safari' NSUserKeyEquivalents '\033Edit\033Undo Close Tab' '@$t'
    } &

    {
    defaults_dict_set_val 'com.apple.iChat' NSUserKeyEquivalents '\033Window\033Select Next Conversation' '@~j'
    defaults_dict_set_val 'com.apple.iChat' NSUserKeyEquivalents '\033Window\033Select Previous Conversation' '@~k'
    } &

    # Wait for defaults to be written down
    wait

    echo "* Setting misc Mac preferences"

    # Set up fastest key repeat rate (needs relogin).
    defaults_write NSGlobalDomain KeyRepeat -int 1 &

    # Sets a low time before key starts repeating.
    defaults_write NSGlobalDomain InitialKeyRepeat -int 15 &

    # Disable the "accent menu" when long-pressing a key
    defaults_write NSGlobalDomain ApplePressAndHoldEnabled -int 0 &

    # System Preferences -> Keyboard -> Shortcuts -> Full Keyboard Access
    # Full Keyboard Access: In Windows and Dialogs, press Tab to move keyboard
    # focus between:
    #   0: Text Boxes and Lists only
    #   2: All controls
    # Set it to 2 because that's much nicer (you can close confirmation prompts
    # with the keyboard, Enter to press the blue one, tab to select between them,
    # space to press the Tab-selected one. If there are underlined letters, hold
    # Option and press the letter to choose that option.
    defaults_write NSGlobalDomain AppleKeyboardUIMode -int 2 &

    # Ctrl-wheel to zoom
    defaults_write com.apple.AppleMultitouchTrackpad HIDScrollZoomModifierMask -int 262144
    defaults_write com.apple.driver.AppleBluetoothMultitouch.trackpad HIDScrollZoomModifierMask -int 262144
    defaults_write com.apple.universalaccess closeViewScrollWheelToggle -int 1
    defaults_write com.apple.universalaccess closeViewPanningMode -int 1

    # Wait for defaults to be written down
    wait

    echo "* Setting iTerm preferences"
    # Specify the preferences directory
    defaults_write com.googlecode.iterm2.plist PrefsCustomFolder -string ~/.config/iTerm
    # Tell iTerm2 to use the custom preferences in the directory
    defaults_write com.googlecode.iterm2.plist LoadPrefsFromCustomFolder -int 1


    #  # Examples from gibfahn
    #  
    #  # Create global shortcut "Merge all windows" âŒ˜-M
    #  if ! defaults read 'Apple Global Domain' NSUserKeyEquivalents | grep -q "Merge All Windows"; then
    #    defaults write 'Apple Global Domain' NSUserKeyEquivalents -dict-add "Merge All Windows" '@$m'
    #  fi
    #
    #  # Remove âŒ˜-h as a Hide Window shortcut in relevant apps.
    #  # -> IntelliJ Community Edition:
    #  if ! defaults read com.jetbrains.intellij.ce NSUserKeyEquivalents | grep -q "Hide IntelliJ IDEA"; then
    #    defaults write com.jetbrains.intellij.ce NSUserKeyEquivalents -dict-add "Hide IntelliJ IDEA" '@~^\\U00a7'
    #  fi
    #  # -> IntelliJ:
    #  if ! defaults read com.jetbrains.intellij NSUserKeyEquivalents | grep -q "Hide IntelliJ IDEA"; then
    #    defaults write com.jetbrains.intellij NSUserKeyEquivalents -dict-add "Hide IntelliJ IDEA" '@~^\\U00a7'
    #  fi
    #  # -> Kitty:
    #  if ! defaults read net.kovidgoyal.kitty NSUserKeyEquivalents | grep -q "Hide kitty"; then
    #    defaults write net.kovidgoyal.kitty NSUserKeyEquivalents -dict-add "Hide kitty" '~^$\\U00a7'
    #  fi
    #  # -> Mail: âŒ˜-backspace moves to Archive.
    #  if ! defaults read com.apple.mail NSUserKeyEquivalents | grep -q "Archive"; then
    #    defaults write com.apple.mail NSUserKeyEquivalents -dict-add "Archive" '@\U0008'
    #  fi
    #
    #  # Set up fastest key repeat rate (needs relogin).
    #  if [[ "$(defaults read NSGlobalDomain KeyRepeat)" != 1 ]]; then
    #    defaults write NSGlobalDomain KeyRepeat -int 1
    #  fi
    #
    #  # Sets a low time before key starts repeating.
    #  if [[ "$(defaults read NSGlobalDomain InitialKeyRepeat)" != 8 ]]; then
    #    defaults write NSGlobalDomain InitialKeyRepeat -int 8
    #  fi
    #
    #  # Increases trackpad sensitivity (SysPref max 3.0).
    #  if [[ "$(defaults read -g com.apple.trackpad.scaling)" != 5 ]]; then
    #    defaults write -g com.apple.trackpad.scaling -float 5.0
    #  fi
    #
    #  # Disables window minimizing animations.
    #  if [[ "$(defaults read NSGlobalDomain NSAutomaticWindowAnimationsEnabled)" != 0 ]]; then
    #    defaults write NSGlobalDomain NSAutomaticWindowAnimationsEnabled -int 0
    #  fi
    #
    #  # Greys out hidden apps in the dock (so you can see which are hidden).
    #  if [[ "$(defaults read com.apple.Dock showhidden)" != 1 ]]; then
    #    defaults write com.apple.Dock showhidden -int 1 && killall Dock
    #  fi
    #
    #  # System Preferences -> Keyboard -> Shortcuts -> Full Keyboard Access
    #  # Full Keyboard Access: In Windows and Dialogs, press Tab to move keyboard
    #  # focus between:
    #  #   0: Text Boxes and Lists only
    #  #   2: All controls
    #  # Set it to 2 because that's much nicer (you can close confirmation prompts
    #  # with the keyboard, Enter to press the blue one, tab to select between them,
    #  # space to press the Tab-selected one. If there are underlined letters, hold
    #  # Option and press the letter to choose that option.
    #  if [[ "$(defaults read -g AppleKeyboardUIMode)" != 2 ]]; then
    #    defaults write -g AppleKeyboardUIMode -int 2
    #  fi
    #
    #  # Show hidden files in the finder.
    #  if [[ "$(defaults read com.apple.finder AppleShowAllFiles)" != 1 ]]; then
    #    defaults write com.apple.finder AppleShowAllFiles -int 1 && killall Finder
    #  fi
    #
    #  # Allow text selection in any QuickLook window.
    #  if [[ "$(defaults read -g QLEnableTextSelection)" != 1 ]]; then
    #    defaults write -g QLEnableTextSelection -int 1
    #  fi
    #
    #  # Allow Finder to be quit (hides Desktop files).
    #  if [[ "$(defaults read com.apple.finder QuitMenuItem)" != 1 ]]; then
    #    defaults write com.apple.finder QuitMenuItem -bool YES
    #    killall Finder
    #    open ~
    #  fi
    #
    #  # Show system info at the login screen when you click the clock icon.
    #  if [[ "$(defaults read /Library/Preferences/com.apple.loginwindow AdminHostInfo)" != HostName ]]; then
    #    sudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName
    #  fi
    #
    #  # Disable the animations for opening Quick Look windows
    #  if [[ "$(defaults read -g QLPanelAnimationDuration)" != 0 ]]; then
    #    defaults write -g QLPanelAnimationDuration -float 0
    #  fi
    #
    #  # System Preferences > General > Click in the scrollbar to: Jump to the spot that's clicked
    #  if [[ "$(defaults read -g AppleScrollerPagingBehavior)" != 1 ]]; then
    #    defaults write -globalDomain AppleScrollerPagingBehavior -int 1
    #  fi



}

main() {
    parse_args "$@"

    # Config specific actions
    # Note: this will unfortunately return 0 after an OS Upgrade, in which case
    # "xcode-select --install" has to be run manually.
    xcode-select -p >/dev/null 2>&1
    if [[ $? == 2 ]]; then
        echo "* Installing xcode command line tools (git, ...)"
        xcode-select --install
    fi

    if [[ $INSTALL == true ]]; then
        echo "* Setting mac preferences (keyboard shortcuts) with 'defaults'"
        set_mac_prefs

        if ! command -v brew >/dev/null 2>&1; then
            echo "* Installing brew"
            echo "Go to https://brew.sh/ and manually install brew..."
            open "https://brew.sh/"
            echo "press enter to continue..."
            read -r
        fi

        echo "* Installing / updating software using brew"
        brew bundle install --file=$(dirname ${BASH_SOURCE[0]})/resources/Brewfile

        echo "* Installing vim plugins"
        vim -c 'PlugInstall | qa'
    fi

    echo "* Symlinking dotfiles"
    linkall

    echo "* Adding Spectacle config symlink"
    ln -sf ~/.config/Spectacle/Shortcuts.json ~/Library/Application\ Support/Spectacle/Shortcuts.json

    echo "* Adding python2 packages"
    pip2 install --upgrade setuptools virtualenv neovim ropevim

    echo "* Adding python3 packages"
    pip3 install --upgrade neovim ropevim

    echo "* Adding ruby gems"
    gem install neovim

    echo "* Adding npm packages"
    npm install -g neovim

    echo "* Adding iCloud symlink"
    ln -sTf ~/'Library/Mobile Documents/com~apple~CloudDocs' ~/iCloud

    echo "* Follow the following tutorial if your display sucks"
    echo "https://www.mathewinkson.com/2013/03/force-rgb-mode-in-mac-os-x-to-fix-the-picture-quality-of-an-external-monitor"
    echo "The script to generate the right calibration is under resources/patch-screen.rb"
}

main "$@"

# vim: et ts=4 sw=4 sts=4
